Instructions to reproduce the results:
  Once you are in the directory, run sudo ./run.sh to run the lab with TCP Reno. Wait for it to finish executing and see the averages and std_devs print statements for both q = 20 and q = 100. The port can be changed in webserver.py and at the top of bufferbloat.py using the `PORT` variable. To run TCP BBR, run sudo ./run_bbr.sh. In case of a keyboard interrupt or other failure, run sudo mn -c before rerunning the .sh files. 

There is a clear difference between the queue size graphs from TCP Reno and TCP BBR. With Reno, the queue often stays near full and only goes down when Reno backs off on loss. On the other hand, with BBR it can be observed that it tries to stay at a level of 10 with spikes going up, reaching the limit for q=20 but not for q=100. The queue size therefore oscillates and never gets stuck at the limit. That happens because BBR measures the bottleneck bandwidth and minimum RTT, then paces the packets to match the link rate rather than only backing off after loss. The result is far less buffer build-up, especially for q=100, which never hits the queue size limit.